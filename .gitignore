import discord
import random
import json
import datetime
from preguntas import preguntas
from discord.ext import commands

Token = ""

intents = discord.Intents.default()
intents.message_content = True
client = commands.Bot(command_prefix="#", intents=intents)

# Archivos de datos
ARCHIVO_PUNTOS = "datos_puntos.json"
ARCHIVO_XP = "datos_xp.json"
ARCHIVO_MONEDAS = "datos_monedas.json"
ARCHIVO_INVENTARIO = "datos_inventario.json"
ARCHIVO_ESTADISTICAS = "datos_estadisticas.json"
ARCHIVO_EVENTOS = "datos_eventos.json"
ARCHIVO_LOGROS = "datos_logros.json"

@client.event
async def on_ready():
    print(f"‚úÖ El bot est√° en l√≠nea como {client.user}")

def cargar_datos(ruta):
    try:
        with open(ruta, "r") as f:
            return json.load(f)
    except:
        return {}

def guardar_datos(ruta, datos):
    with open(ruta, "w") as f:
        json.dump(datos, f, indent=4)

puntuaciones = cargar_datos(ARCHIVO_PUNTOS)
niveles_xp = cargar_datos(ARCHIVO_XP)
monedas = cargar_datos(ARCHIVO_MONEDAS)
inventario = cargar_datos(ARCHIVO_INVENTARIO)
estadisticas = cargar_datos(ARCHIVO_ESTADISTICAS)
eventos = cargar_datos(ARCHIVO_EVENTOS)
logros = cargar_datos(ARCHIVO_LOGROS)

tienda = {
    "pista": {"precio": 5, "desc": "üß† Te da una pista en una pregunta."},
    "doble_xp": {"precio": 25, "desc": "‚ö° Ganas el doble de XP en tu pr√≥xima trivia."},
    "reintentar": {"precio": 15, "desc": "üîÅ Reintenta una pregunta fallada."}
}

def obtener_nivel(xp):
    if xp < 100:
        return 1
    elif xp < 250:
        return 2
    elif xp < 500:
        return 3
    elif xp < 800:
        return 4
    elif xp < 1200:
        return 5
    else:
        return 6

@client.command(name="trivia_multi")
async def trivia_multi(ctx, *jugadores: discord.Member):
    jugadores = list(set([ctx.author] + list(jugadores)))
    puntuaciones_partida = {j: 0 for j in jugadores}
    preguntas_random = random.sample(list(preguntas.items()), 10)

    await ctx.send("üéÆ ¬°Trivia multijugador iniciada! Participantes: " + ", ".join([j.display_name for j in jugadores]))

    for i, (pregunta, respuesta) in enumerate(preguntas_random, 1):
        await ctx.send(f"‚ùì **Pregunta {i}/10:** {pregunta}")

        respondieron = set()

        def check(m):
            return m.author in jugadores and m.channel == ctx.channel and m.author not in respondieron

        try:
            while len(respondieron) < len(jugadores):
                msg = await client.wait_for("message", timeout=30.0, check=check)
                respondieron.add(msg.author)
                if msg.content.lower().strip() == respuesta.lower().strip():
                    puntuaciones_partida[msg.author] += 1
                    await ctx.send(f"‚úÖ {msg.author.display_name} respondi√≥ correctamente!")
                else:
                    await ctx.send(f"‚ùå {msg.author.display_name} se equivoc√≥.")
        except:
            await ctx.send("‚è∞ Tiempo agotado para esta pregunta.")

    resultados = "üèÅ **Trivia finalizada. Resultados:**\n"
    for jugador, pts in sorted(puntuaciones_partida.items(), key=lambda x: x[1], reverse=True):
        usuario = str(jugador.id)
        xp_ganado = pts * 10
        monedas_ganadas = pts * 2

        puntuaciones[usuario] = puntuaciones.get(usuario, 0) + pts
        niveles_xp[usuario] = niveles_xp.get(usuario, 0) + xp_ganado
        monedas[usuario] = monedas.get(usuario, 0) + monedas_ganadas

        resultados += f"{jugador.display_name}: {pts} pts | +{xp_ganado} XP | +{monedas_ganadas} monedas\n"

    guardar_datos(ARCHIVO_PUNTOS, puntuaciones)
    guardar_datos(ARCHIVO_XP, niveles_xp)
    guardar_datos(ARCHIVO_MONEDAS, monedas)

    await ctx.send(resultados)

@client.command(name="trivia")
async def trivia(ctx):
    usuario = str(ctx.author.id)
    preguntas_random = random.sample(list(preguntas.items()), 10)
    puntos = 0
    xp_extra = 0
    monedas_ganadas = 0

    doble_xp = inventario.get(usuario, {}).get("doble_xp", 0) > 0
    if doble_xp:
        inventario[usuario]["doble_xp"] -= 1
        await ctx.send("‚ö° ¬°Usaste 'doble_xp'! Ganar√°s el doble de experiencia en esta trivia.")

    await ctx.send("üéØ ¬°Comenzamos la trivia individual! Tienes 30 segundos por pregunta.")

    for i, (pregunta, respuesta) in enumerate(preguntas_random, start=1):
        await ctx.send(f"‚ùì Pregunta {i}/10: {pregunta}")

        def check(m):
            return m.author == ctx.author and m.channel == ctx.channel

        try:
            msg = await client.wait_for("message", timeout=30.0, check=check)
            if msg.content.lower().strip() == respuesta.lower().strip():
                await ctx.send("‚úÖ ¬°Correcto!")
                puntos += 1
                xp_extra += 10
                monedas_ganadas += 2
            else:
                if inventario.get(usuario, {}).get("reintentar", 0) > 0:
                    inventario[usuario]["reintentar"] -= 1
                    await ctx.send("üîÅ Has usado 'reintentar'. Responde nuevamente:")
                    try:
                        msg2 = await client.wait_for("message", timeout=15.0, check=check)
                        if msg2.content.lower().strip() == respuesta.lower().strip():
                            await ctx.send("‚úÖ ¬°Correcto en el reintento!")
                            puntos += 1
                            xp_extra += 10
                            monedas_ganadas += 2
                            continue
                    except:
                        pass
                await ctx.send(f"‚ùå Incorrecto. La respuesta correcta era: {respuesta}")
        except:
            await ctx.send("‚è∞ Se acab√≥ el tiempo para esta pregunta.")

    if doble_xp:
        xp_extra *= 2

    puntuaciones[usuario] = puntuaciones.get(usuario, 0) + puntos
    niveles_xp[usuario] = niveles_xp.get(usuario, 0) + xp_extra
    monedas[usuario] = monedas.get(usuario, 0) + monedas_ganadas

    guardar_datos(ARCHIVO_PUNTOS, puntuaciones)
    guardar_datos(ARCHIVO_XP, niveles_xp)
    guardar_datos(ARCHIVO_MONEDAS, monedas)
    guardar_datos(ARCHIVO_INVENTARIO, inventario)

    await ctx.sendf("üèÅ Has completado la trivia")
    Respuestas_correctas: {puntos}/10 # type: ignore
    XP_ganado: {xp_extra}
    Monedas_ganadas: {monedas_ganadas}

client.run("")
