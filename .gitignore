mport discord
import random
import json
import datetime
from preguntas import preguntas
from discord.ext import commands

Token = "TOKEN" 

intents = discord.Intents.default()
intents.message_content = True
client = commands.Bot(command_prefix="#", intents=intents)

# Archivos de datos
ARCHIVO_PUNTOS = "datos_puntos.json"
ARCHIVO_XP = "datos_xp.json"
ARCHIVO_MONEDAS = "datos_monedas.json"
ARCHIVO_INVENTARIO = "datos_inventario.json"
ARCHIVO_ESTADISTICAS = "datos_estadisticas.json"
ARCHIVO_EVENTOS = "datos_eventos.json"
ARCHIVO_LOGROS = "datos_logros.json"

# Evento on_ready para confirmar que el bot est√° listo
@client.event
async def on_ready():
    print(f"‚úÖ El bot est√° en l√≠nea como {client.user}")

# Cargar datos
def cargar_datos(ruta):
    try:
        with open(ruta, "r") as f:
            return json.load(f)
    except:
        return {}

def guardar_datos(ruta, datos):
    with open(ruta, "w") as f:
        json.dump(datos, f, indent=4)

puntuaciones = cargar_datos(ARCHIVO_PUNTOS)
niveles_xp = cargar_datos(ARCHIVO_XP)
monedas = cargar_datos(ARCHIVO_MONEDAS)
inventario = cargar_datos(ARCHIVO_INVENTARIO)
estadisticas = cargar_datos(ARCHIVO_ESTADISTICAS)
eventos = cargar_datos(ARCHIVO_EVENTOS)
logros = cargar_datos(ARCHIVO_LOGROS)

tienda = {
    "pista": {"precio": 5, "desc": "üß† Te da una pista en una pregunta."},
    "doble_xp": {"precio": 25, "desc": "‚ö° Ganas el doble de XP en tu pr√≥xima trivia."},
    "reintentar": {"precio": 15, "desc": "üîÅ Reintenta una pregunta fallada."}
}

def obtener_nivel(xp):
    if xp < 100:
        return 1
    elif xp < 250:
        return 2
    elif xp < 500:
        return 3
    elif xp < 800:
        return 4
    elif xp < 1200:
        return 5
    else:
        return 6

@client.command(name="tienda")
async def ver_tienda(ctx):
    mensaje = "**üõí TIENDA DE √çTEMS DISPONIBLES**\n"
    for item, info in tienda.items():
        mensaje += f"üîπ **{item}** - {info['precio']} monedas ‚Üí {info['desc']}\n"
    await ctx.send(mensaje)

@client.command(name="comprar")
async def comprar_item(ctx, item: str):
    usuario = str(ctx.author.id)
    item = item.lower()
    if item not in tienda:
        await ctx.send("‚ùå Ese √≠tem no existe en la tienda.")
        return

    precio = tienda[item]["precio"]
    saldo = monedas.get(usuario, 0)

    if saldo < precio:
        await ctx.send("‚ùå No tienes suficientes monedas.")
        return

    monedas[usuario] = saldo - precio
    inventario.setdefault(usuario, {}).setdefault(item, 0)
    inventario[usuario][item] += 1

    guardar_datos(ARCHIVO_MONEDAS, monedas)
    guardar_datos(ARCHIVO_INVENTARIO, inventario)

    await ctx.send(f"‚úÖ Compraste **{item}**. ¬°Gracias por tu compra!")

@client.command(name="perfil")
async def ver_perfil(ctx):
    usuario = str(ctx.author.id)
    puntos = puntuaciones.get(usuario, 0)
    xp = niveles_xp.get(usuario, 0)
    nivel = obtener_nivel(xp)
    saldo = monedas.get(usuario, 0)
    invent = inventario.get(usuario, {})
    user_logros = logros.get(usuario, [])

    msg = f"üìã **Perfil de {ctx.author.name}**\n"
    msg += f"üèÖ Nivel: {nivel} ({xp} XP)\n"
    msg += f"üéØ Puntos totales: {puntos}\n"
    msg += f"üí∞ Monedas: {saldo}\n"
    msg += "üéí Inventario:\n"
    if invent:
        for k, v in invent.items():
            msg += f"  - {k}: {v}\n"
    else:
        msg += "  (Vac√≠o)\n"
    msg += "üèÜ Logros desbloqueados:\n"
    if user_logros:
        for logro in user_logros:
            msg += f"  - {logro}\n"
    else:
        msg += "  (Ninguno a√∫n)\n"
    await ctx.send(msg)

@client.command(name="ayuda")
async def mostrar_ayuda(ctx):
    mensaje = (
        "**üÜò COMANDOS DISPONIBLES:**\n"
        "üëâ `#trivia` - Inicia una partida de trivia individual\n"
        "üëâ `#perfil` - Muestra tu progreso, nivel, XP, monedas e inventario\n"
        "üëâ `#tienda` - Muestra los √≠tems que puedes comprar\n"
        "üëâ `#comprar <√≠tem>` - Compra un √≠tem de la tienda\n"
        "üëâ `#reset` - Reinicia tu perfil desde cero (confirmaci√≥n requerida)\n"
        "üëâ `#evento` - Consulta tu desaf√≠o diario\n"
    )
    await ctx.send(mensaje)

@client.command(name="evento")
async def evento_diario(ctx):
    usuario = str(ctx.author.id)
    hoy = str(datetime.date.today())
    eventos.setdefault(usuario, {})

    if eventos[usuario].get("fecha") != hoy:
        eventos[usuario] = {
            "fecha": hoy,
            "progreso": 0,
            "meta": 5,
            "completado": False
        }
        guardar_datos(ARCHIVO_EVENTOS, eventos)

    evento = eventos[usuario]
    estado = "‚úÖ Completado" if evento["completado"] else f"{evento['progreso']}/{evento['meta']}"
    await ctx.send(f"""üéØ Desaf√≠o del d√≠a: Responde correctamente a 5 preguntas.
üìÜ Fecha: {hoy}
üìä Progreso: {estado}""")


client.run("")





















# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/
